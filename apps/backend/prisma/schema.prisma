// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Category {
  BAGS
  DRINKWARE
  ELECTRONICS
  FOOTWEAR
  HEADWEAR
  HOODIES
  JACKETS
  KIDS
  PETS
  SHIRTS
  STICKERS
}

enum ProductCategory {
  ACCESSORIES
  BODY_AND_HAIR
  CLOTHING
  ELECTRONICS
  FOOTWEAR
  HOME_AND_INTERIOR
  KIDS
  TSHIRTS
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String
  password       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Session        Session[]
  OAuthAccount   OAuthAccount[]
  cart           Cart?
  Order          Order[]
  RecentlyViewed RecentlyViewed[]
}

model Product {
  id             String           @id @default(cuid())
  name           String
  description    String
  price          Int
  category       ProductCategory
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  imageUrl       String
  sizes          String[]
  colors         String[]
  rating         Float            @default(0)
  cartItems      CartItem[]
  OrderItem      OrderItem[]
  RecentlyViewed RecentlyViewed[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestId   String?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId])
  @@unique([guestId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  users     User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model OAuthAccount {
  id                String @id @default(cuid())
  provider          String
  providerAccountId String
  userId            String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  status            String      @default("PENDING")
  paymentStatus     String?
  paymentId         String?
  totalAmount       Float
  checkoutSessionId String?
  orderItems        OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id])

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model RecentlyViewed {
  id        String   @id @default(cuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}
