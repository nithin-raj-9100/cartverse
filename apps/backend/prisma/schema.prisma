// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  BAGS
  DRINKWARE
  ELECTRONICS
  FOOTWEAR
  HEADWEAR
  HOODIES
  JACKETS
  KIDS
  PETS
  SHIRTS
  STICKERS
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String
  password     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Session      Session[]
  OAuthAccount OAuthAccount[]
  cart         Cart?
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  // Fow now choose Float but also checkout Decimal 
  price       Float
  category    Category
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  imageUrl    String
  sizes       String[]
  colors      String[]
  // Add a relation to the Image model
  cartItems   CartItem[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  users     User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model OAuthAccount {
  id                String @id @default(cuid())
  provider          String
  providerAccountId String
  userId            String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
